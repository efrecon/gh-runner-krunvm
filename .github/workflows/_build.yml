name: multi-platform build

on:
  workflow_call:
    inputs:
      image:
        description: 'Base image to build'
        required: true
        type: string
      file:
        description: 'Dockerfile to use'
        required: false
        type: string
        default: 'Dockerfile'
      context:
        description: 'Build context'
        required: false
        type: string
        default: '.'
      runs-on:
        description: 'Runner to use'
        required: false
        type: string
        default: 'ubuntu-latest'
      platforms:
        description: 'Platforms to build for, comma separated list of arch/os pairs'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
    secrets:
      username:
        description: 'username at registry'
        required: true
      password:
        description: 'password at registry'
        required: true

env:
  REGISTRY_IMAGE: ${{ inputs.image }}

jobs:
  convert:
    runs-on: ${{ inputs.runs-on }}
    outputs:
      platforms: ${{ fromJson(steps.convert.outputs.platforms) }}
    steps:
      -
        name: Convert Platforms
        id: convert
        run: |
          platforms=${{ inputs.platforms }}
          inside=$(printf %s\\n "$platforms" | sed -E -e 's/,/\", \"/g' -e 's/\" +/\"/g' -e 's/ +\"/\"/g')
          printf 'platforms=["%s"]' "$inside" >> $GITHUB_OUTPUT

  build:
    runs-on: ${{ inputs.runs-on }}
    needs:
      - convert
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ needs.convert.outputs.platforms }}
    steps:
      -
        name: Prepare
        id: platform
        run: |
          platform=${{ needs.convert.outputs.platforms }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      -
        name: Build and push by digest
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ needs.convert.outputs.platforms }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
          file: ${{ inputs.file }}
      -
        name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      -
        name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ env.PLATFORM_PAIR }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1

  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      -
        name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: digests-*
          merge-multiple: true
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.username }}
          password: ${{ secrets.password }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}
